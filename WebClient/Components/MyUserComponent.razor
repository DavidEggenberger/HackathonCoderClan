@inject IHttpClientFactory httpClientFactory
@inject HttpClient http
@inject UpdateService updateSerice

<style>
    .apexcharts-toolbar {
        display: none;
    }
</style>

<div class="MyUserContainer">
    <div style="display: grid; place-content: center;">
        <AuthorizeView>
            <Authorized>
                <h3>@context.User.Identity.Name Configure your User Profile</h3>
            </Authorized>
            <NotAuthorized>
                <h3>If you are logged in you here can join/create groups and have an overview over your sent messages</h3>
                <h3>Here you see an overview over all sent messages</h3>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="MainSection" style="overflow: hidden;">
        <AuthorizeView>
            <Authorized>
                <div class="userConfigurationComponent">
                    <div class="allGroupsContainer">
                        <h3 class="underscore">Join/leave an existing group:</h3>
                        @if (allGroups != null)
                        {
                            foreach (var group in allGroups)
                            {
                                <div class="groupSection">
                                    <h3>@group.Name</h3>
                                    @if (!group.MembersId.Contains(principal.Claims.Where(s => s.Type == ClaimTypes.NameIdentifier).First().Value))
                                    {
                                        <h5 style="cursor: pointer; margin-left: 10px;" @onclick="async() => await JoinGroup(group.Id)">Join Group</h5>
                                    }
                                    else
                                    {
                                        <h5 style="cursor: pointer; margin-left: 10px;" @onclick="async() => await LeaveGroup(group.Id)">Leave Group</h5>
                                    }
                                    @if (group.CreatorId == null || group.CreatorId == principal.Claims.Where(s => s.Type == ClaimTypes.NameIdentifier).First().Value)
                                    {
                                        <h5 style="cursor: pointer; margin-left: 10px;" @onclick="async() => await DeleteGroup(group.Id)">Delete Group</h5>
                                    }
                                </div>
                            }
                        }
                        <h3 class="underscore" style="margin-top: 10px;">Create a new group</h3>
                        <div>
                            <label style="display: block;">Group Name:</label>
                            <input style="display: block;" @bind="groupName" @bind:event="oninput" />
                            <button @onclick="async() => await CreateGroupAsync()">Create Group</button>
                        </div>
                    </div>
                    <div style="
    display: flex;
    height: 300px;
    width: 100%;
">
                        @if (messagesInformation != null)
                        {
                            <ApexChart  Title="Your Sent Messages" TItem="MessagesDTO">
                                <ApexPointSeries TItem="MessagesDTO" Name="SentMessagesperDay"
                                                 Items="messagesInformation"
                                                 SeriesType="SeriesType.Area"
                                                 XValue="@(e =>  e.SentTime.ToUniversalTime().Hour)"
                                                 YAggregate="@(e => e.Count())"
                                                 ShowDataLabels />
                            </ApexChart>
                        }
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div style="
    display: flex;
    height: 300px;
    width: 100%;
">
                    @if (AllmessagesInformation != null)
                    {
                        <ApexChart Title="Sent Messages" TItem="MessagesDTO">
                            <ApexPointSeries TItem="MessagesDTO" Name="SentMessagesperDay"
                                             Items="AllmessagesInformation"
                                             SeriesType="SeriesType.Area"
                                             XValue="@(e =>  e.SentTime.ToUniversalTime().Hour)"
                                             YAggregate="@(e => e.Count())"
                                             ShowDataLabels />
                        </ApexChart>
                    }
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code{
        [CascadingParameter]
        public Task<AuthenticationState> AuthenticationState { get; set; }
    private ClaimsPrincipal principal;
    private CurrentUserDTO currentUserDTO;
    private List<GroupDTO> allGroups;
    private List<MessagesDTO> messagesInformation;
    private List<MessagesDTO> AllmessagesInformation;
    private string groupName;
    private ApexChartOptions<MessagesDTO> options;
    ApexChart<MessagesDTO> ApexxChart;
    protected override async Task OnInitializedAsync()
    {
        options = new ApexChartOptions<MessagesDTO>
        {
            Chart = new Chart
            {
                Width = 340,
                Height = 250,
                ForeColor = "#ccc",
                Toolbar = new Toolbar
                {
                    Show = false
                }
            },
            Xaxis = new XAxis
            {
                Tooltip = new AxisTooltip { Enabled = false },
            },
            DataLabels = new ApexCharts.DataLabels
            {
                Enabled = false
            },
            Fill = new Fill
            {
                Gradient = new FillGradient
                {
                    OpacityFrom = 0.8,
                    OpacityTo = 0.3
                }
            },
            Colors = new List<string> { "#00BAEC" },
            Stroke = new Stroke { Curve = Curve.Smooth },
            Legend = new Legend
            {
                Show = false
            },
        };
        ApexxChart = new ApexChart<MessagesDTO>();
        updateSerice.UpdateEvent += async () =>
        {
            messagesInformation = await http.GetFromJsonAsync<List<MessagesDTO>>("user/MessagesInformation");
            ApexxChart.SetRerenderChart();
            StateHasChanged();
        };
        if ((principal = (await AuthenticationState).User) != null && principal.Identity.IsAuthenticated)
        {
            HttpClient httpClient = httpClientFactory.CreateClient("authorizedClient");
            currentUserDTO = await httpClient.GetFromJsonAsync<CurrentUserDTO>("user/me");
            messagesInformation = await http.GetFromJsonAsync<List<MessagesDTO>>("user/MessagesInformation");
            allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        }
        else
        {
            AllmessagesInformation = await http.GetFromJsonAsync<List<MessagesDTO>>("user/allMessages");
            StateHasChanged();
        }
        StateHasChanged();
    }
    public async Task CreateGroupAsync()
    {
        GroupDTO groupDTO = new GroupDTO
        {
            Name = groupName
        };
        await http.PostAsJsonAsync<GroupDTO>("group/creategroup", groupDTO);
        groupName = string.Empty;
        allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        updateSerice.Invoke();
        StateHasChanged();
    }
    public async Task JoinGroup(Guid groupId)
    {
        await http.GetAsync($"group/joingroup/{groupId}");
        allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        StateHasChanged();
        updateSerice.Invoke();
    }
    public async Task LeaveGroup(Guid groupId)
    {
        await http.GetAsync($"group/leavegroup/{groupId}");
        allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        StateHasChanged();
        updateSerice.Invoke();
    }
    public async Task DeleteGroup(Guid groupId)
    {
        await http.GetAsync($"group/deletegroup/{groupId}");
        allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        StateHasChanged();
    }
}
