@inject HttpClient http
@inject UpdateService updateSerice

<div class="ChatComponentContainer">
    @if (selectedGrup == null)
    {
        <h3>Select a group to chat</h3>
    }
    else
    {
        <h3>Selected group: @selectedGrup?.Name</h3>
    }
    <select @bind="SelectedGroupId" @bind:event="oninput" style="margin: 5px 0;">
        @if (allGroups != null)
        {
            <option>Select the group</option>
            foreach (var item in allGroups)
            {
                <option value="@item.Id">@item.Name</option>
            }
        }
    </select>
    <div class="MessageSection">
        @if (messages != null)
        {
            <AuthorizeView>
                <Authorized>
                    @foreach (var message in messages)
                    {
                        if (message.SenderUserName == context.User.Identity.Name)
                        {
                            <div class="message" style="display: flex; justify-content: space-between; width: 100%;">
                                @message.SenderUserName: @message.Content <h3 @onclick='async() => { await HubConnection.InvokeAsync("RemoveMessage", new MessagesDTO { Id = message.Id, GroupId = selectedGrup.Id }); updateSerice.Invoke(); }'>Delete Message</h3>
                            </div>
                        }
                    }
                </Authorized>
                <NotAuthorized>
                    @foreach (var message in messages)
                    {
                        <div class="message">
                            @message.SenderUserName: @message.Content
                        </div>
                    }
                </NotAuthorized>
            </AuthorizeView>
        }
        <AuthorizeView>
            <Authorized>
                @if (selectedGrup != null)
                {
                    if (selectedGrup.MembersId.Contains(context.User.Claims.First(co => co.Type == ClaimTypes.NameIdentifier).Value))
                    {
                        <input @bind="message" @bind:event="oninput" />
                        <h3 @onclick="async() => await SendMessage()" style="cursor: pointer;">Send Message</h3>
                    }
                    else
                    {
                        <h3>You must join a clan to chat</h3>
                    }
                }
            </Authorized>
            <NotAuthorized>
                <h4>In order to send messages you must login and join the group</h4>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code{
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    private string message;
    private GroupDTO selectedGrup;
    private Guid selectedGroupId;
    public Guid SelectedGroupId
    {
        get => selectedGroupId;
        set
        {
            selectedGroupId = value;
            selectedGrup = allGroups.Where(s => s.Id == selectedGroupId).First();
            GetMessagesForGroupAsync(selectedGroupId);
        }
    }
    private List<GroupDTO> allGroups;
    private List<MessagesDTO> messages;
    protected override async Task OnInitializedAsync()
    {
        updateSerice.UpdateEvent += async () =>
        {
            allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
            selectedGrup = allGroups.Where(s => s.Id == selectedGroupId).First();
            StateHasChanged();
        };
        allGroups = await http.GetFromJsonAsync<List<GroupDTO>>("Group/GetAllGroups");
        HubConnection.On<Guid>("UpdateChatMessages", async (groupId) =>
        {
            if (SelectedGroupId == groupId)
            {
                await GetMessagesForGroupAsync(SelectedGroupId);
            }
        });
    }

    public async Task GetMessagesForGroupAsync(Guid groupId)
    {
        messages = await http.GetFromJsonAsync<List<MessagesDTO>>($"Group/MessagesForGroup/{groupId}");
        StateHasChanged();
    }
    public async Task SendMessage()
    {
        await HubConnection.InvokeAsync("SendMessage", new MessagesDTO
        {
            Content = message,
            GroupId = selectedGroupId
        });
        message = string.Empty;
        updateSerice.Invoke();
    }
}
